2015:
  Awardee: [Nate Foster, Michael B. Greenwald, Jonathan T. Moore, Benjamin C.
Pierce, Alan Schmitt]
  Other: |
    (for 2005) [Combinators for Bidirectional Tree Transformations: A Linguistic Approach to the View Update Problem](http://dl.acm.org/citation.cfm?doid=1040305.1040325)
  Citation: |
    The "view-update problem" is a classic problem in databases: when
    operating on a partial view of a data structure, how should
    updates to the view be propagated to the original data structure?
    This POPL 2005 paper was instrumental in bringing the view-update
    problem to the attention of the programming languages community
    and demonstrating the broad relevance of the problem beyond
    databases.  The immediate contributions of the paper were (1) to
    introduce a general mathematical space of well-behaved
    bidirectional transformations called "lenses," and (2) to develop
    a specific instantiation of this framework in the form of a
    domain-specific language of combinators for tree transformations,
    which served as the basis for subsequent tools for editing XML and
    HTML.  More broadly, the paper sparked a great deal of follow-on
    work in the area of BX ("bidirectional transformations"), leading
    to a fruitful collaboration between the worlds of databases,
    programming languages, and software engineering.


2014:
  Awardee: [Thomas Henzinger, Ranjit Jhala, Rupak Majumdar, Kenneth McMillan]
  Other: |
    (for 2004) [Abstractions from proofs](http://dl.acm.org/citation.cfm?id=964021)
  Citation: |
    Interpolation can be used to construct an inductive invariant for
    a transition system that is strong enough to prove a given
    property.  Prior to Henzinger et al.'s paper, interpolation had
    only been applied to model checking of finite-state systems.  In
    this paper, the authors demonstrated a fundamental generalization
    of Craig interpolation to program analysis by predicate
    abstraction, opening the door for interpolation to be applied to
    abstraction refinement of infinite-state systems.  This work
    showed how interpolation offers a fundamental way to explain
    abstraction refinement in a logical framework and has led to many
    extensions to increase the power of abstraction in program
    analysis.

2013:
  Awardee: [David F Bacon, Perry Cheng, VT Rajan]
  Other: |
    (for 2003) [A real-time garbage collector with low overhead and consistent utilization](http://dl.acm.org/citation.cfm?id=604155&CFID=186511822&CFTOKEN=35702610)
  Citation: |
    Languages with automatic memory management offer well-known advantages
    in terms of software engineering, but the use of garbage collection
    seemed for a long time to place such languages off-limits for hard
    real-time and embedded systems.  Indeed, prior to this highly
    influential paper, the existing approaches to real-time garbage
    collection suffered from a number of practical problems: a lack of
    hard bounds on pause times in the face of fragmentation or large data
    structures; high space overhead due to the use of copying collection
    to avoid fragmentation; and uneven mutator utilization due to the use
    of work-based scheduling algorithms.  Bacon, Cheng & Rajan's paper
    showed how to overcome all these problems in the design of a *real*
    real-time garbage collector for Java.  The collector, which was
    implemented and tested in the Jikes RVM, employed an impressive
    variety of techniques, such as time-based scheduling and "mostly
    non-moving" collection, in order to provide guaranteed pause times,
    consistent mutator utilization, and low space overhead.  In short, the
    paper marked a major advance toward the important goal of turning hard
    real-time garbage collection into a reality.

2012:
  Awardee: George C. Necula, Scott McPeak, and Westley Weimer, University of California, Berkeley"
  Other: |
    (for 2002) [CCured: Type-Safe Retrofitting of Legacy Code](http://dl.acm.org/citation.cfm?id=1065892)

  Citation:    
    This paper showed a path to taking legacy C code and 
    making it safer, by adding type safety guarantees to 
    existing C programs. It uses a combination of static 
    and dynamic techniques to allow programmers to conduct 
    low-level operations while guaranteeing safety properties 
    regarding pointers and minimizing overhead. For many 
    C programs, CCured&#8217;s type inference is able to infer 
    that most or all of the pointers are statically verifiable 
    to be type safe. This paper demonstrates the beauty of 
    both dynamic and static types, influencing the design 
    of languages such as C#, and inspiring continuing 
    research on static and dynamic analysis.

2011:
  Awardee: Samin Ishtiaq and Peter W. O'Hearn
  Other: |
    (for 2001) [BI as an Assertion Language for Mutable Data Structures](http://dx.doi.org/10.1145/360204.375719)
  Citation: |
    In applying the logic of bunched implications (BI) to mutable data
    structures this paper laid the groundwork for the flowering of
    separation logic (heap models of separation logic are specific BI
    models), which allows reasoning about programs with dynamically
    allocated (and deallocated) memory.  This paper introduced the
    'frame rule' which supports local reasoning in separation logic,
    where specifications and proofs concentrate on just those memory
    cells manipulated by a program component rather than the entire
    global program state.  Separation logic underlies continuing
    research on what is described as local reasoning, having diverse
    application in domains such as program verification and automated
    parallelization.

2010:
  Awardee: Luca Cardelli and Andrew D. Gordon
  Other: |
    (for 2000) [Anytime, Anywhere: Modal Logics for Mobile Ambients](http://doi.acm.org/10.1145/325694.325742)
  Citation: |
    "Anytime, Anywhere: Modal Logics for Mobile Ambients" by Luca
    Cardelli and Andrew D. Gordon helped spur a flowering of work in
    the area of process calculi that continues today. The paper focused
    on modal logics for reasoning about both temporal and spacial
    modalities for ambient behaviours, demonstrating techniques that
    also apply to other process calculi (even those without an explicit
    notion of location), so contributing to excitement in an area that
    was growing at that time and continues. The work has led to
    application of concurrency theory in fields as diverse as security,
    safety critical applications, query languages for semistructured
    data, and systems biology.

2009:
  Awardee: Andrew C. Myers
  Other: |
   (for 1999) [JFlow: Practical Mostly-Static Information Flow Control](http://doi.acm.org/10.1145/292540.292561)
  Citation: |
    "JFlow: Practical Mostly-Static Information Flow Control" by Andrew
    C. Myers demonstrated the practicality of using static information
    flow analysis to protect privacy and preserve integrity by giving
    an efficient information flow type checker for an extension of the
    widely-used Java language. The work has had a significant impact
    both within and beyond the programming language community. In
    particular, subsequent work for other languages has largely
    followed the path laid out in this paper, and the compiler
    infrastructure developed for JFlow (now called Jif) is widely used
    as a research platform. Furthermore, using the JFlow work as a
    basis, several major research initiatives are investigating the
    challenges of building complex, real-world systems with
    confidentiality guarantees.

2008: 
  Awardee: Greg Morrisett, David Walker, Karl Crary, and Neal Glew
  Other: |
    (for 1998) [From System F to Typed Assembly Language](http://doi.acm.org/10.1145/268946.268954)
  Citation: |    
    "From System F to Typed Assembly Language" by Greg Morrisett, David
    Walker, Karl Crary, and Neal Glew began a major development in the 
    application of type system ideas to low level programming.  The
    paper shows how to compile a high-level, statically typed language
    into TAL, a typed assembly language defined by the authors. The
    type system for the assembly language ensures that source-level
    abstractions like closures and polymorphic functions are enforced
    at the machine-code level while permitting aggressive, low-level
    optimizations such as register allocation and instruction
    scheduling. This infrastructure provides the basis for ensuring the
    safety of untrusted low-level code artifacts, regardless of their
    source.  A large body of subsequent work has drawn on the ideas in
    this paper, including work on proof-carrying code and certifying
    compilers.

2007:
  Awardee: George Necula
  Other: |
   (for 1997): [Proof-carrying Code](http://doi.acm.org/10.1145/263699.263712)

2006:
  Awardee: Bjarne Steensgaard
  Other: |
   (for 1996): [Points-to Analysis in Almost Linear Time](http://doi.acm.org/10.1145/237721.237727)
    
2005:
  Awardee: Luca Cardelli
  Other: |
   (for 1995): [A Language with Distributed Scope](http://doi.acm.org/10.1145/199448.199516)

2004:
  Awardee: Mads Tofte and Jean-Pierre Talpin
  Other: |
   (for 1994): [Implementation of the Typed Call-by-Value lambda-calculus using a Stack of Regions](http://doi.acm.org/10.1145/174675.177855)
    
2003:
  Awardee: Simon Peyton Jones and Philip Wadler
  Other: |
   (for 1993): [Imperative functional programming](http://doi.acm.org/10.1145/158511.158524)

