2015:
  Awardee: David Walker
  Citation: |

    David Walker has made deep and varied contributions to programming
    language research, but always with an eye towards emerging and
    surprising applications of foundational theory.  He was one of the
    co-authors of the work on Typed Assembly Language (TAL), which
    showed how conventional type systems could be brought to bear on
    low-level machine code, and which forms the basis for today's
    typed virtual machines such as Microsoft's .NET.  Focusing on the
    need for better reasoning principles for pointers, he helped
    develop Alias Types, the Calculus of Capabilities, and
    region-based formalisms that influenced the design of type systems
    for modern languages like Cyclone, Vault, and Rust.  Walker also
    provided semantic foundations for secure program monitoring, and
    used his insights to develop new tools for enforcing security
    policies on legacy code.  Long before "big data" was a hot topic,
    he and his co-authors designed languages for processing large,
    ad-hoc data collections.  Recognizing trends in hardware, he
    developed new techniques for verifying the safety of programs
    executing on faulty processors.  And, most recently, foreseeing
    the rise of software-defined networking, he has worked with people
    from both the networking and PL communities to develop new,
    high-level languages (Frenetic, Pyretic) for programming networks.
    In summary, Prof. Walker is a groundbreaking researcher in
    programming languages, connecting foundations to novel
    applications.



2014:
  Awardee: Sumit Gulwani
  Citation: |

    Sumit Gulwani has made pioneering contributions to the field of
    programming languages, especially in the areas of program analysis
    and program synthesis.  Building on his foundational work in
    program analysis including using randomized algorithms, improving
    abstract interpretation, and reasoning about programs as
    continuous functions, Dr. Gulwani recognized the important
    connection between program verification and program synthesis.
    His research has demonstrated that imprecise human intent, in the
    form of examples, natural language, and other kinds of input, can
    be transformed into incomplete program specifications, which
    together with ranking techniques can then be used to synthesize
    intended programs, empowering users to accomplish complex and
    repetitive programming tasks without needing any knowledge of
    programming. His contributions include algorithms for synthesizing
    string transformation programs by examples, published in POPL
    2011, and the technical basis for "Flash Fill", a new feature
    shipping in Microsoft's Excel 2013.  He has since then extended
    this line of algorithmic work to synthesizing programs in several
    other important domains and also broadly advertised this line of
    work by publishing in top-tier ACM conferences in various other
    areas including AI, machine learning, HCI, databases, and
    knowledge discovery. He has also championed the application of
    program synthesis techniques to developing intelligent tutoring
    systems for numerous subject domains including introductory
    programming, mathematics, logic, and automata theory.  The
    visionary aspects of his work were recently recognized by the CACM
    Editorial Board when two of his recent papers appeared as CACM
    Research Highlights in the same issue, and a summary of his work
    on computer-aided Education was accepted to appear as a CACM
    article.

    In summary, Dr. Gulwani is a highly motivated, creative, and
    inter-disciplinary researcher whose vision is to empower computer
    users around the world to be more productive and educated.  His
    insights in using program synthesis to address problems in
    end-user programming and education will have deep and lasting
    influence.


2013:
  Awardee: Lars Birkedal
  Citation: |
    
    Lars Birkedal is a world leader in foundational programming
    languages research, and *the* pre-eminent researcher of his
    generation in the area of programming language semantics.  His
    work, spanning a multitude of top journal and conference
    publications, has had significant impact in many areas.  These
    include foundational type theory, compiler implementation,
    Milner's bigraphical reactive systems, logics and models for
    relational parametricity, and verification technology for
    semantically complex languages.

    Birkedal is a pioneer in "bringing semantics into the 21st
    century": developing rigorous and scalable semantic and
    verification techniques to account for the needs and complexities
    of modern languages.  Toward this end in particular, he has (a)
    made numerous advances to the theory and practice of region-based
    memory management, (b) made fundamental contributions to the
    theory of relational parametricity, which underlies our semantic
    understanding of abstract data types, and (c) developed
    higher-order separation logics and other powerful tools for the
    modular verification of realistic imperative, object-oriented, and
    concurrent programming patterns.

    In short, Birkedal has tackled hard problems of paramount
    importance to the future of programming language research, and has
    made startling advancements across the board.  He has done so both
    independently, via the research group he built up at the IT
    University of Copenhagen, and also through fruitful collaborations
    with an impressive network of international colleagues, thus
    setting an excellent example for other junior researchers.

2012:
  Awardee: Shriram Krishnamurthi
  Citation: |
    The SIGPLAN 2012 Robin Milner Young Researcher Award goes to Shriram
    Krishnamurthi, a prolific researcher who brings programming language
    theory to bear in many other disciplines, thus exposing its
    foundational value. His research contributions range from type
    soundness proofs for Java and influential extensions thereof, through
    foundational aspects of web programming, to model-driven development
    and empirical studies. The most important aspects of Krishnamurthi's
    research are

     - that it cuts across multiple disciplines, including education,
       software engineering, formal methods and security, but always
       building on the firm ground of programming language theory;
     - its orientation towards practicality and applicability to standard
       platforms: programming systems for teaching, reactive web
       programming, executable JavaScript semantics, and analysis
       techniques for security policies;
     - that it has resulted not only in publications, but also in
       practical systems that are used in academia and industry; and
     - the clarity of its exposition and presentation.
     - Shriram is also an influential educator, reaching out beyond the
       university to infect school kids with algebraic thinking.

    In summary, Shriram is an extraordinarily broad researcher, making
    sustained contributions in important and exciting areas, with a
    commitment to education that is ensuring that his ideas have even
    broader impact.
