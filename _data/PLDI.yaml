2015: 
  Awardee: [Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, Kim Hazelwood]
  Other: |
    (for 2005) "Pin: building customized program analysis tools with dynamic instrumentation"
  Citation: |

    This paper introduced Pin, a dynamic binary instrumentation
    framework that enables the creation of dynamic program analysis
    tools.  Pin uses dynamic compilation to instrument executables and
    dynamically-linked libraries while they are running, permitting
    the tool writer to study the behavior of an application at the
    instruction level without significant perturbation to application
    behavior.  The PLDI 2005 paper is highly cited and the system it
    describes is in widespread use in academia and industry.  Pin's
    ease of use and relative efficiency have made it the tool of
    choice for dynamic binary instrumentation.

2014: 
  Awardee: Maged M. Michael
  Other: |
    (for 2004) Scalable Lock-Free Dynamic Memory Allocation
  Citation: |
    Maged Michael's PLDI'04 paper is considered a landmark in memory
    allocation for multithreaded programs, presenting the first
    completely lock-free general-purpose user-space allocator. It
    provides good performance with respect to scalability, speed and
    space efficiency, while at the same time only relying on common
    hardware and OS support. The work is highly regarded and
    frequently referenced, and is also the basis of multiple memory
    allocator implementations, both in IBM products and in follow-on
    research.

2013:
  Awardee: [David Gay, Philip Levis, J. Robert von Behren, Matt Welsh, Eric Brewer, and David E. Culler]
  Other: |
    (for 2003) [The nesC language: A holistic approach to networked embedded systems](http://dl.acm.org/citation.cfm?id=781133)
  Citation: |

    This is the first publication to describe the design,
    implementation, and optimization of the language nesC, which is a
    variant of the C programming language especially well suited to
    the programming of embedded systems.  Much as the C programming
    language made possible the development of UNIX, so has nesC made
    possible the development of TinyOS.  A decade hence, nesC is still
    the language of choice for developing applications under TinyOS on
    "motes" and other embedded systems platforms.  Central to the
    design of nesC and TinyOS is the notion of an asynchronous, or
    non-blocking, call.  This form of software architecture nicely
    accommodates the timing uncertainties and failures experienced by
    embedded systems applications in the real world.  The success and
    longevity of nesC can be attributed to its precise and useful
    formulations of concurrency, atomicity, and modularization with
    regard to its intended application audience.  These formulations
    allow for efficient implementations while offering encapsulation
    mechanisms that encourage software sharing and reuse.  The nesC
    paper has amassed hundreds of citations, and the language
    continues to be in widespread use for teaching, research, and
    industry in the embedded systems community.

2012:
  Awardee: Cormac Flanagan, K. Rustan M. Leino, Mark Lillibridge, Greg Nelson, James B. Saxe, Raymie Stata
  Other: |
    (for 2002) [Extended Static Checking for Java](http://dl.acm.org/citation.cfm?doid=512529.512558)
  Citation: |
    This paper marks a turning point in the field of static checking,
    describing pragmatic design decisions that promote practicality over
    completeness. Pioneered in ESC/Modula-3, techniques from ESC/Java are
    now widely used in various forms in Microsoft&#8217;s development
    tools, notably as part of Code Contracts which ships with
    VisualStudio.  Recent innovations strongly influenced by ESC/Java
    include refinement types for Haskell, and verification of Eiffel
    programs.

2011:
  Awardee: Thomas Ball, Rupak Majumdar, Todd Millstein, Sriram K. Rajamani
  Other: |
    (for 2001) [Automatic predicate abstraction of C programs](http://doi.acm.org/10.1145/378795.378846)
  Citation: |
   The paper, "Automatic Predicate Abstraction of C Programs" by
   Thomas Ball, Rupak Majumdar, Todd D. Millstein, and Sriram K.
   Rajamani presented the underlying predicate abstraction technology
   of the SLAM project for checking that software satisfies critical
   behavioral properties of the interfaces it uses and to aid software
   engineers in designing interfaces and software that ensure reliable
   and correct execution. The technology is now part of Microsoft's
   Static Driver Verifier in the Windows Driver Development Kit. This
   is one of the earliest examples of automation of software
   verification on a large scale and the basis for numerous efforts to
   expand the domains that can be verified."  


2010: 
  Awardee: Vasanth Bala, Evelyn Duesterwald, Sanjeev Banerji
  Other: |
    (for 2000) [Dynamo: A Transparent Dynamic Optimization System](http://doi.acm.org/10.1145/349299.349303)
  Citation: |
    "Dynamo pioneered the technique of monitoring, analyzing, and
    optimizing binary code on-the-fly while the program executes,
    without relying on any program modifications, compiler hints,
    profile data from prior runs, or special purpose hardware. Contrary
    to intuition, one could use Dynamo to substantially improve the
    performance of a binary's execution, even when it was generated by
    a state-of-the-art optimizing compiler. By continuously monitoring
    its own overhead, Dynamo could suspend itself (and resume later)
    when the optimization gains were not sufficient to offset the cost
    of its own operation. The ability for a software-only system to
    speed up a program binary without any kind of modification or
    externally provided hints challenged much entrenched thinking at
    the time, and catalyzed a rethinking of the compiler-architecture
    interface. Hardware designs were shifting more of the performance
    optimization burden from the hardware to the compiler. At the same
    time software was moving towards greater use of dynamic binding,
    resulting in a shrinking optimization scope for the compiler. These
    two trends were in tension with one another. By operating at binary
    execution time, Dynamo helped bridge this growing gap by
    complementing the compiler's traditional strength in static control
    flow based optimization with instruction-level runtime trace-based
    optimization. This paper was the first in a series of publications
    that continue to this day on similar trace-based systems for
    dynamic binary optimization, dynamic binary instrumentation, and
    dynamic binary translation."

2009: 
  Awardee: Matteo Frigo
  Other: |
    (for 1999) [A Fast Fourier Transform Compiler](http://doi.acm.org/10.1145/301618.301661)
  Citation: |
    "The 1999 PLDI paper &#8220;A Fast Fourier Transform Compiler&#8221; by Matteo
    Frigo describes the implementation of *genfft*, a special-purpose
    compiler that produces the performance critical code for a library,
    called FFTW (the &#8220;Fastest Fourier Transform in the West&#8221;), that
    computes the discrete Fourier transform. FFTW is the predominant
    open fast Fourier transform package available today, as it has been
    since its introduction a decade ago. *genfft* demonstrated the
    power of domain-specific compilation&#8212;FFTW achieves the best or
    close to best performance on most machines, which is remarkable for
    a single package. By encapsulating expert knowledge from the FFT
    algorithm domain and the compiler domain, *genfft* and FFTW provide
    a tremendous service to the scientific and technical community by
    making highly efficient FFTs available to everyone on any machine.
    As well as being the fastest FFT in the West, FFTW may be the last
    FFT in the West as the quality of this package and the maturity of
    the field may mean that it will never be superseded, at least for

2008: 
  Awardee: Matteo Frigo, Charles E. Leiserson, and Keith H. Randall
  Other: |
    (for 1998) [The Implementation of the Cilk-5 Multithreaded Language](http://doi.acm.org/10.1145/277652.277725)
  Citation: |
    "The 1998 PLDI paper "Implementation of the Cilk-5 Multithreaded
    Language" by Matteo Frigo, Charles E. Leiserson, and Keith H.
    Randall introduced an efficient form of thread-local deques to
    control scheduling of multithreaded programs. This innovation not
    only opened the way to faster and simpler runtimes for fine-grained
    parallelism, but also provided a basis for simpler parallel
    recursive programming techniques that elegantly extend those of
    sequential programming. The stack-like side of a deque acts just
    like a standard procedure stack, while the queue side enables
    breadth-first work-stealing by other threads. The work-stealing
    techniques introduced in this paper are beginning to influence
    common practice, such as the Intel Threading Building Blocks
    project, an upcoming standardized fork-join framework for Java, and
    a variety of projects at Microsoft."

2007:
  Awardee:     Glenn Ammons, Thomas Ball, and James R. Larus
  Other: |
    (for 1997): [Exploiting Hardware Performance Counters with Flow and Context Sensitive Profiling](http://doi.acm.org/10.1145/258915.258924)

    
2006:
  Awardee:     David Tarditi, Greg Morrisett, Perry Cheng, Christopher Stone, Robert Harper, and Peter Lee
  Other: |
    (for 1996): [TIL: A Type-Directed Optimizing Compiler for ML](http://doi.acm.org/10.1145/231379.231414)

    
2005:
  Awardee:     Jeffrey Dean, Craig Chambers, and David Grove
  Other: |
    (for 1995): [Selective Specialization for Object-Oriented Languages](http://doi.acm.org/10.1145/207110.207119)

    
2004:
  Awardee:     Amitabh Srivastava and Alan Eustace
  Other: |
    (for 1994): [ATOM: a system for building customized program analysis tools](http://doi.acm.org/10.1145/178243.178260)

    
2003:
  Awardee:     Hans Boehm
  Other: |
    (for 1993): [Space Efficient Conservative Garbage Collection](http://portal.acm.org/citation.cfm?doid=155090.155109)

    
2002:
  Awardee:     Jens Knoop,Oliver R&#252;thing and Bernhard Steffen
  Other: |
    (for 1992): [Lazy Code Motion](http://doi.acm.org/10.1145/183432.183443)

    
2001:
  Awardee:     Michael E. Wolf and Monica S. Lam
  Other: |
    (for 1991): [A data locality optimizing algorithm](http://portal.acm.org/citation.cfm?id=113449&coll=portal&dl=ACM&CFID=1250278&CFTOKEN=93017092)

    
2000:
  Awardee:     Karl Pettis and Robert C. Hansen
  Other: |
    (for 1990): [Profile guided code positioning](http://portal.acm.org/citation.cfm?id=93550&coll=portal&dl=ACM&CFID=1260981&CFTOKEN=84971644)

